# na--'s ebook-tools: a Python port of the shell scripts
# ref.: https://bit.ly/2qYZeqF

# IMPORTANT: The script convert-to-txt.py doesn't have any local option, but some
# of the global options affect this script's behavior a lot, especially the OCR
# ones, see https://bit.ly/2HoCxHl


[general-options]
# All of these options are part of the common library and may affect some or
# all of the scripts.

#########################
# General control flags #
#########################

# Whether debug messages will be displayed on stderr. Passing the parameter or
# changing verbose to true and piping the stderr to a file is useful for
# debugging or keeping a record of exactly what happens without cluttering and
# overwhelming the normal execution output.
verbose=False

# If this is enabled, no file rename/move/symlink/etc. operations will actually
# be executed.
dry_run=False

# Instead of moving the ebook files, create symbolic links to them.
symlink_only=False

# Do not delete the gathered metadata for the organized ebooks, instead save it
# in an accompanying file together with each renamed book. It is very useful for
# semi-automatic verification of the organized files with interactive-organizer.py
# or for additional verification, indexing or processing at a later date.
keep_metadata=False


###############################################################################
# Options related to extracting ISBNs from files and finding metadata by ISBN #
###############################################################################

# This is the regular expression used to match ISBN-like numbers in the supplied
# books. It is matched with python `re` module, so look-ahead and look-behind
# can be used. Also it is purposefully a bit loose (i.e. it can match some
# non-ISBN numbers), since the found numbers will be checked for validity.
isbn_regex=(?<![0-9])(-?9-?7[789]-?)?((-?[0-9]-?){9}[0-9xX])(?![0-9])

# This is a regular expression that is matched against the MIME type of the
# searched files. Matching files are searched directly for ISBNs, without
# converting or OCR-ing them to .txt first.
isbn_direct_grep_files=^(text/(plain|xml|html)|application/xml)$

# This is a regular expression that is matched against the MIME type of the
# searched files. Matching files are not searched for ISBNs beyond their
# filename. The default value is a bit long because it tries to make the scripts
# ignore .gif and .svg images, audio, video and executable files and fonts.
isbn_ignored_files=^(image/(gif|svg.+)|application/(x-shockwave-flash|CDFV2|vnd.ms-opentype|x-font-ttf|x-dosexec|vnd.ms-excel|x-java-applet)|audio/.+|video/.+)$

# These options specify if and how we should reorder the ebook text before
# searching for ISBNs in it. By default, the first 400 lines of the text are
# searched as they are, then the last 50 are searched in reverse and finally
# the remainder in the middle. This reordering is done to improve the odds that
# the first found ISBNs in a book text actually belong to that book (ex. from
# the copyright section or the back cover), instead of being random ISBNs
# mentioned in the middle of the book. No part of the text is searched twice,
# even if these regions overlap. If you use the command-line option, the format
# for <value> is false to disable the functionality or first_lines,last_lines
# to enable it with the specified values.
isbn_grep_reorder_files=True
isbn_grep_rf_scan_first=400
isbn_grep_rf_reverse_last=50

# This option allows you to specify the online metadata sources and order in
# which the scripts will try searching in them for books by their ISBN. The
# actual search is done by calibre's `fetch-ebook-metadata` command-line
# application, so any custom calibre metadata plugins [1] can also be used.
# To see the currently available options, run `fetch-ebook-metadata --help` and
# check the description for the `--allowed-plugin` option.
# [1] https://plugins.calibre-ebook.com/
isbn_metadata_fetch_order=Goodreads,Amazon.com,Google,ISBNDB,WorldCat xISBN,OZON.ru


###################
# Options for OCR #
###################

# Whether to enable OCR for .pdf, .djvu and image files. It is disabled by
# default and can be used differently in two scripts:
# - organize-ebooks.py can use OCR for finding ISBNs in scanned books. Setting
#   the value to true will cause it to use OCR for books that failed to be
#   converted to .txt or were converted to empty files by the simple conversion
#   tools (ebook-convert, pdftotext, djvutxt). Setting the value to always will
#   cause it to use OCR even when the simple tools produced a non-empty result,
#   if there were no ISBNs in it.
# - convert-to-txt.py can use OCR for the conversion to .txt. Setting the value
#   to true will cause it to use OCR for books that failed to be converted to
#   .txt or were converted to empty files by the simple conversion tools.
#   Setting it to always will cause it to first try OCR-ing the books before
#   trying the simple conversion tools.
ocr_enabled=False

# Value n,m instructs the scripts to convert only the first n and last m pages
# when OCR-ing ebooks. This is done because OCR is a slow resource-intensive
# process and ISBN numbers are usually at the beginning or at the end of books.
#  Setting the value to false disables this optimization and is the default for
# convert-to-txt.py, where we probably want the whole book to be converted.
ocr_only_first_last_pages=7,3

# This allows us to define a hook for using custom OCR settings or software.
# The default value is just a wrapper that allows us to use both tesseract 3
# and 4 with some predefined settings. You can use a custom bash function or
# shell script - the first argument is the input image (books are OCR-ed page
# by page) and the second argument is the file you have to write the output
# text to.
# TODO: test if you can give a bash function or shell script, right now
# it is a python function
ocr_command=tesseract_wrapper


#####################################################################
# Options related to extracting and searching for non-ISBN metadata #
#####################################################################

# When files and file metadata are parsed, they are split into words (or more
# precisely, either alpha or numeric tokens) and ones shorter than this value
# are ignored. By default, single and two character number and words are ignored.
token_min_length=3

# TODO: RE_YEAR not defined
# A regular expression that is matched against the filename/author/title tokens
# and matching tokens are ignored. The default regular expression includes
# common words that probably hinder online metadata searching like book, novel,
# series, volume and others, as well as probable publication years like (so
# 1999 is ignored while 2033 is not). You can see it in lib.py.
tokens_to_ignore=ebook|book|novel|series|ed(ition)?|vol(ume)?|${RE_YEAR}

# This option allows you to specify the online metadata sources in which the
# scripts will try searching for books by non-ISBN metadata (i.e. author and
# title). The actual search is done by calibre's `fetch-ebook-metadata`
# command-line application, so any custom calibre metadata plugins [1] can also
# be used. To see the currently available options, run `fetch-ebook-metadata --help`
# and check the description for the `--allowed-plugin` option.
# In contrast to searching by ISBNs, searching by author and title is done
# concurrently in all of the allowed online metadata sources. The number of
# sources is smaller because some metadata sources can be searched only by ISBN
# or return many false-positives when searching by title and author.
# [1] https://plugins.calibre-ebook.com/
organize_without_isbn_sources=Goodreads,Amazon.com,Google


#################################################
# Options related to the input and output files #
#################################################

# This specifies how the filenames of the organized files will look. It is a
# bash string that is evaluated so it can be very flexible [1] (and also
# potentially unsafe). The book metadata is present in a hashmap with name `d`
# and uppercase keys. When changing this parameter, keep in mind that you have
# to either escape the `$` symbols or wrap everything in single quotes like so:
#      output_filename_template='"${d[TITLE]} by ${d[AUTHORS]}.${d[EXT]}"'
# [1] http://www.tldp.org/LDP/abs/html/parameter-substitution.html
#
# By default the organized files start with the comma-separated author name(s),
# followed by the book series name and number in square brackets (if present),
# followed by the book title, the year of publication (if present), the ISBN(s)
# (if present) and the original extension. Here are are how output filenames
# using the default template look:
# Cory Doctorow - [Little Brother #1] - Little Brother (2008) [0765319853].pdf
# Eliezer Yudkowsky - Harry Potter and the Methods of Rationality (2015).epub
output_filename_template=${d[AUTHORS]// & /, } - ${d[SERIES]:+[${d[SERIES]}] - }${d[TITLE]/:/ -}${d[PUBLISHED]:+ (${d[PUBLISHED]%%-*})}${d[ISBN]:+ [${d[ISBN]}]}.${d[EXT]}

# If keep_metadata is enabled, this is the extension of the additional metadata
# file that is saved next to each newly renamed file.
output_metadata_extension=meta


#########################
# Miscellaneous options #
#########################

# A comma-separated sort option [1] that will be used every time multiple files
# are processed (i.e. in every script except convert-to-txt.py).
# Example: file_sort_flags=option1,option2,option3
# [1] https://bit.ly/2HwDfhG
file_sort_flags=

# The length of the debug prefix used by the some scripts in the output when
# verbose mode is enabled.
debug_prefix_length=40


[organize-ebooks]
###########################################
## Specific options for organizing files ##
###########################################

# Specify comma-separated folder paths containing ebooks to be organized. Each
# folder will be recursively scan for ebook files.
# TODO: by default it should be empty
# TODO: there can be a problem if folder paths contain commas since we are splitting
# on commas to get the different folder paths
ebook_folders=~/test/ebooks/folderA, ~/test/ebooks/folderB

# Do not organize or rename files, just check them for corruption (ex. zero-filled
# files, corrupt archives or broken .pdf files). Useful with the OUTPUT_FOLDER_CORRUPT option.
corruption_check_only=False

# A regular expression that specifies which file extensions will be tested with
# `7z t` for corruption.
tested_archive_extensions=^(7z|bz2|chm|arj|cab|gz|tgz|gzip|zip|rar|xz|tar|epub|docx|odt|ods|cbr|cbz|maff|iso)$

# Specify whether the script will try to organize ebooks if there were no ISBN
# found in the book or if no metadata was found online with the retrieved ISBNs.
# If enabled, the script will first try to use calibre's ebook-meta command-line
# tool to extract the author and title metadata from the ebook file. The script
# will try searching the online metadata sources (organize_without_isbn_sources)
# by the extracted author & title and just by title. If there is no useful
# metadata or nothing is found online, the script will try to use the filename
# for searching.
organize_without_isbn=False

# This is a regular expression that is matched against lowercase filenames. All
# files that do not contain ISBNs are matched against it and matching files are
# ignored by the script, even if organize_without_isbn is true. The default
# value is calibrated to match most periodicals (magazines, newspapers, etc.) so
# the script can ignore them.
# TODO: to be set in-code
without_isbn_ignore=

# This is a regular expression that is matched against lowercase filenames. All
# files that do not contain ISBNs and do not match without_isbn_ignore are
# matched against it and matching files are considered pamphlets by default.
# They are moved to output_folder_pamphlets if set, otherwise they are ignored.
pamphlet_included_files=\.(png|jpg|jpeg|gif|bmp|svg|csv|pptx?)$

# This is a regular expression that is matched against lowercase filenames. If
# files do not contain ISBNs and match against it, they are NOT considered as
# pamphlets, even if they have a small size or number of pages.
pamphlet_excluded_files=\.(chm|epub|cbr|cbz|mobi|lit|pdb)$

# .pdf files that do not contain valid ISBNs and have a lower number pages than
# this are considered pamplets/non-ebook documents.
pamphlet_max_pdf_pages=50

# Other files that do not contain valid ISBNs and are below this size in KBs are
# considered pamplets/non-ebook documents.
# NOTE: file size is given in Kibibyte (KiB)
pamphlet_max_filesize_kib=250


####################
## Output options ##
####################

# The folder where ebooks that were renamed based on the ISBN metadata will be
# moved to.
# NOTE: if output_folder is the empty string, then its value is the current
# working directory
output_folder=

#  If organize_without_isbn is enabled, this is the folder to which all ebooks
# that were renamed based on non-ISBN metadata will be moved to.
output_folder_uncertain=

# If specified, corrupt files will be moved to this folder.
output_folder_corrupt=

# If specified, pamphlets will be moved to this folder.
output_folder_pamphlets=


[interactive-organizer]
# You can use this argument multiple times to specify different comma-separated
# folders to which you can quickly move ebook files. The first specified folder
# is the default. Example: OUTPUT_FOLDERS=/path/to/folder1,/path/to/folder2
output_folders=

# This mode is useful when organize-ebooks.py was called with keep_metadata=True.
# Ebooks that contain all of the tokens from the old file name in the new one are
# directly moved to the default output folder.
quick_mode=False

# This option is used to specify a base directory in whose sub-folders files can
# more easily be moved during the interactive session because of tab autocompletion
custom_move_base_dir=

# If you want to enable the option of restoring files to their original folders
# (or at least with the same folder structure), set this as the base path.
restore_original_base_dir=

# Which differences due to accents and other diacritical marks to be ignored when
# comparing tokens in quick_mode and the interactive interface. The default value
# handles some basic cases like allowing letters like á, à, â and others instead
# of a and the reverse when comparing the old and new files.
# TODO: to be set in-code
diacritic_difference_maskings=

# Whether tokens from the old filenames that partially match in the new filename
# to be accepted by quick_mode and the interactive interface.
match_partial_words=False


[find-isbns]
# NOTE: Some global options affect this script (especially the ones related to
# extracting ISBNs from files, see https://bit.ly/2HWgXXL). ISBN_RET_SEPARATOR
# is the only script-specific option.

# This specifies the separator that will be used when returning any found ISBNs.
isbn_ret_separator=\n


[rename-calibre-library]
# This is the output folder the renamed books will be moved to.
# NOTE: if output_folder is the empty string, then its value is the current
# working directory
output_folder=

# This specifies whether metadata files will be saved together with the renamed
# ebooks. Value `opfcopy` just copies calibre's metadata.opf next to each renamed
# file with a output_metadata_extension extension, while `recreate` saves a
# metadata file that is similar to the one organize-ebooks.py creates. Any other
# value disables this function.
save_metadata=recreate


[split-into-folders]
# The output folder in which all the new consecutively named folders will be created.
# NOTE: if output_folder is the empty string, then its value is the current
# working directory
output_folder=

# The number of the first folder.
start_number=0

# The printf format string that specifies the pattern with which new folders will
# be created. By default it creates folders like 00000000, 00001000, 00002000, ....
folder_pattern=%%05d000

# How many files should be moved to each folder.
files_per_folder=1000